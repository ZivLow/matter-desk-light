/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

// Prevent multiple inclusion
#pragma once

#include <app/util/endpoint-config-defines.h>
#include <lib/core/CHIPConfig.h>

// Default values for the attributes longer than a pointer,
// in a form of a binary blob
// Separate block is generated for big-endian and little-endian cases.
#if CHIP_CONFIG_BIG_ENDIAN_TARGET
#define GENERATED_DEFAULTS                                                     \
  {                                                                            \
                                                                               \
    /* Endpoint: 0, Cluster: General Commissioning (server), big-endian */     \
                                                                               \
    /* 0 - Breadcrumb, */                                                      \
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,                            \
  }

#else // !CHIP_CONFIG_BIG_ENDIAN_TARGET
#define GENERATED_DEFAULTS                                                     \
  {                                                                            \
                                                                               \
    /* Endpoint: 0, Cluster: General Commissioning (server), little-endian */  \
                                                                               \
    /* 0 - Breadcrumb, */                                                      \
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,                            \
  }

#endif // CHIP_CONFIG_BIG_ENDIAN_TARGET

#define GENERATED_DEFAULTS_COUNT (1)

// This is an array of EmberAfAttributeMinMaxValue structures.
#define GENERATED_MIN_MAX_DEFAULT_COUNT 2
#define GENERATED_MIN_MAX_DEFAULTS                                             \
  {                                                                            \
                                                                               \
    /* Endpoint: 1, Cluster: On/Off (server) */                                \
    {(uint16_t)0x0, (uint16_t)0x0, (uint16_t)0x2}, /* StartUpOnOff */          \
                                                                               \
    /* Endpoint: 1, Cluster: Level Control (server) */                         \
    {                                                                          \
      (uint16_t)0x0, (uint16_t)0x0, (uint16_t)0x3                              \
    } /* Options */                                                            \
  }

// This is an array of EmberAfAttributeMetadata structures.
#define GENERATED_ATTRIBUTE_COUNT 127
#define GENERATED_ATTRIBUTES                                                   \
  {                                                                            \
                                                                               \
    /* Endpoint: 0, Cluster: Descriptor (server) */                            \
    {ZAP_EMPTY_DEFAULT(), 0x00000000, 0, ZAP_TYPE(ARRAY),                      \
     ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* DeviceTypeList */               \
        {ZAP_EMPTY_DEFAULT(), 0x00000001, 0, ZAP_TYPE(ARRAY),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* ServerList */               \
        {ZAP_EMPTY_DEFAULT(), 0x00000002, 0, ZAP_TYPE(ARRAY),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* ClientList */               \
        {ZAP_EMPTY_DEFAULT(), 0x00000003, 0, ZAP_TYPE(ARRAY),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* PartsList */                \
        {ZAP_EMPTY_DEFAULT(), 0x0000FFFC, 4, ZAP_TYPE(BITMAP32),               \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* FeatureMap */               \
        {ZAP_EMPTY_DEFAULT(), 0x0000FFFD, 2, ZAP_TYPE(INT16U),                 \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* ClusterRevision */          \
                                                                               \
        /* Endpoint: 0, Cluster: Access Control (server) */                    \
        {ZAP_EMPTY_DEFAULT(), 0x00000000, 0, ZAP_TYPE(ARRAY),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE) |                                \
             ZAP_ATTRIBUTE_MASK(WRITABLE)}, /* ACL */                          \
        {ZAP_EMPTY_DEFAULT(), 0x00000001, 0, ZAP_TYPE(ARRAY),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE) |                                \
             ZAP_ATTRIBUTE_MASK(WRITABLE)}, /* Extension */                    \
        {ZAP_EMPTY_DEFAULT(), 0x00000002, 2, ZAP_TYPE(INT16U),                 \
         ZAP_ATTRIBUTE_MASK(                                                   \
             EXTERNAL_STORAGE)}, /* SubjectsPerAccessControlEntry */           \
        {ZAP_EMPTY_DEFAULT(), 0x00000003, 2, ZAP_TYPE(INT16U),                 \
         ZAP_ATTRIBUTE_MASK(                                                   \
             EXTERNAL_STORAGE)}, /* TargetsPerAccessControlEntry */            \
        {ZAP_EMPTY_DEFAULT(), 0x00000004, 2, ZAP_TYPE(INT16U),                 \
         ZAP_ATTRIBUTE_MASK(                                                   \
             EXTERNAL_STORAGE)}, /* AccessControlEntriesPerFabric */           \
        {ZAP_SIMPLE_DEFAULT(0), 0x0000FFFC, 4, ZAP_TYPE(BITMAP32),             \
         0}, /* FeatureMap */                                                  \
        {ZAP_EMPTY_DEFAULT(), 0x0000FFFD, 2, ZAP_TYPE(INT16U),                 \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* ClusterRevision */          \
                                                                               \
        /* Endpoint: 0, Cluster: Basic Information (server) */                 \
        {ZAP_EMPTY_DEFAULT(), 0x00000000, 2, ZAP_TYPE(INT16U),                 \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE) |                                \
             ZAP_ATTRIBUTE_MASK(SINGLETON)}, /* DataModelRevision */           \
        {ZAP_EMPTY_DEFAULT(), 0x00000001, 33, ZAP_TYPE(CHAR_STRING),           \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE) |                                \
             ZAP_ATTRIBUTE_MASK(SINGLETON)}, /* VendorName */                  \
        {ZAP_EMPTY_DEFAULT(), 0x00000002, 2, ZAP_TYPE(VENDOR_ID),              \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE) |                                \
             ZAP_ATTRIBUTE_MASK(SINGLETON)}, /* VendorID */                    \
        {ZAP_EMPTY_DEFAULT(), 0x00000003, 33, ZAP_TYPE(CHAR_STRING),           \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE) |                                \
             ZAP_ATTRIBUTE_MASK(SINGLETON)}, /* ProductName */                 \
        {ZAP_EMPTY_DEFAULT(), 0x00000004, 2, ZAP_TYPE(INT16U),                 \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE) |                                \
             ZAP_ATTRIBUTE_MASK(SINGLETON)}, /* ProductID */                   \
        {ZAP_EMPTY_DEFAULT(), 0x00000005, 33, ZAP_TYPE(CHAR_STRING),           \
         ZAP_ATTRIBUTE_MASK(SINGLETON) |                                       \
             ZAP_ATTRIBUTE_MASK(WRITABLE)}, /* NodeLabel */                    \
        {ZAP_EMPTY_DEFAULT(), 0x00000006, 3, ZAP_TYPE(CHAR_STRING),            \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE) |                                \
             ZAP_ATTRIBUTE_MASK(SINGLETON) |                                   \
             ZAP_ATTRIBUTE_MASK(WRITABLE)}, /* Location */                     \
        {ZAP_EMPTY_DEFAULT(), 0x00000007, 2, ZAP_TYPE(INT16U),                 \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE) |                                \
             ZAP_ATTRIBUTE_MASK(SINGLETON)}, /* HardwareVersion */             \
        {ZAP_EMPTY_DEFAULT(), 0x00000008, 65, ZAP_TYPE(CHAR_STRING),           \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE) |                                \
             ZAP_ATTRIBUTE_MASK(SINGLETON)}, /* HardwareVersionString */       \
        {ZAP_EMPTY_DEFAULT(), 0x00000009, 4, ZAP_TYPE(INT32U),                 \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE) |                                \
             ZAP_ATTRIBUTE_MASK(SINGLETON)}, /* SoftwareVersion */             \
        {ZAP_EMPTY_DEFAULT(), 0x0000000A, 65, ZAP_TYPE(CHAR_STRING),           \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE) |                                \
             ZAP_ATTRIBUTE_MASK(SINGLETON)}, /* SoftwareVersionString */       \
        {ZAP_EMPTY_DEFAULT(), 0x00000013, 0, ZAP_TYPE(STRUCT),                 \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE) |                                \
             ZAP_ATTRIBUTE_MASK(SINGLETON)}, /* CapabilityMinima */            \
        {ZAP_EMPTY_DEFAULT(), 0x00000015, 4, ZAP_TYPE(INT32U),                 \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE) |                                \
             ZAP_ATTRIBUTE_MASK(SINGLETON)}, /* SpecificationVersion */        \
        {ZAP_EMPTY_DEFAULT(), 0x00000016, 2, ZAP_TYPE(INT16U),                 \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE) |                                \
             ZAP_ATTRIBUTE_MASK(SINGLETON)}, /* MaxPathsPerInvoke */           \
        {ZAP_SIMPLE_DEFAULT(0), 0x0000FFFC, 4, ZAP_TYPE(BITMAP32),             \
         ZAP_ATTRIBUTE_MASK(SINGLETON)}, /* FeatureMap */                      \
        {ZAP_SIMPLE_DEFAULT(3), 0x0000FFFD, 2, ZAP_TYPE(INT16U),               \
         ZAP_ATTRIBUTE_MASK(SINGLETON)}, /* ClusterRevision */                 \
                                                                               \
        /* Endpoint: 0, Cluster: Localization Configuration (server) */        \
        {ZAP_EMPTY_DEFAULT(), 0x00000000, 36, ZAP_TYPE(CHAR_STRING),           \
         ZAP_ATTRIBUTE_MASK(WRITABLE)}, /* ActiveLocale */                     \
        {ZAP_EMPTY_DEFAULT(), 0x00000001, 0, ZAP_TYPE(ARRAY),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* SupportedLocales */         \
        {ZAP_SIMPLE_DEFAULT(0), 0x0000FFFC, 4, ZAP_TYPE(BITMAP32),             \
         0}, /* FeatureMap */                                                  \
        {ZAP_SIMPLE_DEFAULT(1), 0x0000FFFD, 2, ZAP_TYPE(INT16U),               \
         0}, /* ClusterRevision */                                             \
                                                                               \
        /* Endpoint: 0, Cluster: Time Format Localization (server) */          \
        {ZAP_EMPTY_DEFAULT(), 0x00000000, 1, ZAP_TYPE(ENUM8),                  \
         ZAP_ATTRIBUTE_MASK(WRITABLE)}, /* HourFormat */                       \
        {ZAP_SIMPLE_DEFAULT(0), 0x0000FFFC, 4, ZAP_TYPE(BITMAP32),             \
         0}, /* FeatureMap */                                                  \
        {ZAP_SIMPLE_DEFAULT(1), 0x0000FFFD, 2, ZAP_TYPE(INT16U),               \
         0}, /* ClusterRevision */                                             \
                                                                               \
        /* Endpoint: 0, Cluster: Unit Localization (server) */                 \
        {ZAP_SIMPLE_DEFAULT(0), 0x0000FFFC, 4, ZAP_TYPE(BITMAP32),             \
         0}, /* FeatureMap */                                                  \
        {ZAP_SIMPLE_DEFAULT(1), 0x0000FFFD, 2, ZAP_TYPE(INT16U),               \
         0}, /* ClusterRevision */                                             \
                                                                               \
        /* Endpoint: 0, Cluster: General Commissioning (server) */             \
        {ZAP_LONG_DEFAULTS_INDEX(0), 0x00000000, 8, ZAP_TYPE(INT64U),          \
         ZAP_ATTRIBUTE_MASK(WRITABLE)}, /* Breadcrumb */                       \
        {ZAP_EMPTY_DEFAULT(), 0x00000001, 0, ZAP_TYPE(STRUCT),                 \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* BasicCommissioningInfo */   \
        {ZAP_EMPTY_DEFAULT(), 0x00000002, 1, ZAP_TYPE(ENUM8),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* RegulatoryConfig */         \
        {ZAP_EMPTY_DEFAULT(), 0x00000003, 1, ZAP_TYPE(ENUM8),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* LocationCapability */       \
        {ZAP_EMPTY_DEFAULT(), 0x00000004, 1, ZAP_TYPE(BOOLEAN),                \
         ZAP_ATTRIBUTE_MASK(                                                   \
             EXTERNAL_STORAGE)}, /* SupportsConcurrentConnection */            \
        {ZAP_SIMPLE_DEFAULT(0), 0x0000FFFC, 4, ZAP_TYPE(BITMAP32),             \
         0}, /* FeatureMap */                                                  \
        {ZAP_SIMPLE_DEFAULT(1), 0x0000FFFD, 2, ZAP_TYPE(INT16U),               \
         0}, /* ClusterRevision */                                             \
                                                                               \
        /* Endpoint: 0, Cluster: Network Commissioning (server) */             \
        {ZAP_EMPTY_DEFAULT(), 0x00000000, 1, ZAP_TYPE(INT8U),                  \
         0}, /* MaxNetworks */                                                 \
        {ZAP_EMPTY_DEFAULT(), 0x00000001, 0, ZAP_TYPE(ARRAY),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* Networks */                 \
        {ZAP_EMPTY_DEFAULT(), 0x00000004, 1, ZAP_TYPE(BOOLEAN),                \
         ZAP_ATTRIBUTE_MASK(WRITABLE)}, /* InterfaceEnabled */                 \
        {ZAP_EMPTY_DEFAULT(), 0x00000005, 1, ZAP_TYPE(ENUM8),                  \
         ZAP_ATTRIBUTE_MASK(NULLABLE)}, /* LastNetworkingStatus */             \
        {ZAP_EMPTY_DEFAULT(), 0x00000006, 33, ZAP_TYPE(OCTET_STRING),          \
         ZAP_ATTRIBUTE_MASK(NULLABLE)}, /* LastNetworkID */                    \
        {ZAP_EMPTY_DEFAULT(), 0x00000007, 4, ZAP_TYPE(INT32S),                 \
         ZAP_ATTRIBUTE_MASK(NULLABLE)}, /* LastConnectErrorValue */            \
        {ZAP_SIMPLE_DEFAULT(0), 0x0000FFFC, 4, ZAP_TYPE(BITMAP32),             \
         0}, /* FeatureMap */                                                  \
        {ZAP_SIMPLE_DEFAULT(1), 0x0000FFFD, 2, ZAP_TYPE(INT16U),               \
         0}, /* ClusterRevision */                                             \
                                                                               \
        /* Endpoint: 0, Cluster: General Diagnostics (server) */               \
        {ZAP_EMPTY_DEFAULT(), 0x00000000, 0, ZAP_TYPE(ARRAY),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* NetworkInterfaces */        \
        {ZAP_EMPTY_DEFAULT(), 0x00000001, 2, ZAP_TYPE(INT16U),                 \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* RebootCount */              \
        {ZAP_EMPTY_DEFAULT(), 0x00000002, 8, ZAP_TYPE(INT64U),                 \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* UpTime */                   \
        {ZAP_EMPTY_DEFAULT(), 0x00000008, 1, ZAP_TYPE(BOOLEAN),                \
         0}, /* TestEventTriggersEnabled */                                    \
        {ZAP_EMPTY_DEFAULT(), 0x0000FFFC, 4, ZAP_TYPE(BITMAP32),               \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* FeatureMap */               \
        {ZAP_EMPTY_DEFAULT(), 0x0000FFFD, 2, ZAP_TYPE(INT16U),                 \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* ClusterRevision */          \
                                                                               \
        /* Endpoint: 0, Cluster: Administrator Commissioning (server) */       \
        {ZAP_EMPTY_DEFAULT(), 0x00000000, 1, ZAP_TYPE(ENUM8),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* WindowStatus */             \
        {ZAP_EMPTY_DEFAULT(), 0x00000001, 1, ZAP_TYPE(FABRIC_IDX),             \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE) |                                \
             ZAP_ATTRIBUTE_MASK(NULLABLE)}, /* AdminFabricIndex */             \
        {ZAP_EMPTY_DEFAULT(), 0x00000002, 2, ZAP_TYPE(VENDOR_ID),              \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE) |                                \
             ZAP_ATTRIBUTE_MASK(NULLABLE)}, /* AdminVendorId */                \
        {ZAP_SIMPLE_DEFAULT(0), 0x0000FFFC, 4, ZAP_TYPE(BITMAP32),             \
         0}, /* FeatureMap */                                                  \
        {ZAP_SIMPLE_DEFAULT(1), 0x0000FFFD, 2, ZAP_TYPE(INT16U),               \
         0}, /* ClusterRevision */                                             \
                                                                               \
        /* Endpoint: 0, Cluster: Operational Credentials (server) */           \
        {ZAP_EMPTY_DEFAULT(), 0x00000000, 0, ZAP_TYPE(ARRAY),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* NOCs */                     \
        {ZAP_EMPTY_DEFAULT(), 0x00000001, 0, ZAP_TYPE(ARRAY),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* Fabrics */                  \
        {ZAP_EMPTY_DEFAULT(), 0x00000002, 1, ZAP_TYPE(INT8U),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* SupportedFabrics */         \
        {ZAP_EMPTY_DEFAULT(), 0x00000003, 1, ZAP_TYPE(INT8U),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* CommissionedFabrics */      \
        {ZAP_EMPTY_DEFAULT(), 0x00000004, 0, ZAP_TYPE(ARRAY),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* TrustedRootCertificates */  \
        {ZAP_EMPTY_DEFAULT(), 0x00000005, 1, ZAP_TYPE(INT8U),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* CurrentFabricIndex */       \
        {ZAP_SIMPLE_DEFAULT(0), 0x0000FFFC, 4, ZAP_TYPE(BITMAP32),             \
         0}, /* FeatureMap */                                                  \
        {ZAP_SIMPLE_DEFAULT(1), 0x0000FFFD, 2, ZAP_TYPE(INT16U),               \
         0}, /* ClusterRevision */                                             \
                                                                               \
        /* Endpoint: 0, Cluster: Group Key Management (server) */              \
        {ZAP_EMPTY_DEFAULT(), 0x00000000, 0, ZAP_TYPE(ARRAY),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE) |                                \
             ZAP_ATTRIBUTE_MASK(WRITABLE)}, /* GroupKeyMap */                  \
        {ZAP_EMPTY_DEFAULT(), 0x00000001, 0, ZAP_TYPE(ARRAY),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* GroupTable */               \
        {ZAP_EMPTY_DEFAULT(), 0x00000002, 2, ZAP_TYPE(INT16U),                 \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* MaxGroupsPerFabric */       \
        {ZAP_EMPTY_DEFAULT(), 0x00000003, 2, ZAP_TYPE(INT16U),                 \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* MaxGroupKeysPerFabric */    \
        {ZAP_EMPTY_DEFAULT(), 0x0000FFFC, 4, ZAP_TYPE(BITMAP32),               \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* FeatureMap */               \
        {ZAP_EMPTY_DEFAULT(), 0x0000FFFD, 2, ZAP_TYPE(INT16U),                 \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* ClusterRevision */          \
                                                                               \
        /* Endpoint: 1, Cluster: Identify (server) */                          \
        {ZAP_SIMPLE_DEFAULT(0x0), 0x00000000, 2, ZAP_TYPE(INT16U),             \
         ZAP_ATTRIBUTE_MASK(WRITABLE)}, /* IdentifyTime */                     \
        {ZAP_SIMPLE_DEFAULT(0x00), 0x00000001, 1, ZAP_TYPE(ENUM8),             \
         0}, /* IdentifyType */                                                \
        {ZAP_SIMPLE_DEFAULT(0), 0x0000FFFC, 4, ZAP_TYPE(BITMAP32),             \
         0}, /* FeatureMap */                                                  \
        {ZAP_SIMPLE_DEFAULT(4), 0x0000FFFD, 2, ZAP_TYPE(INT16U),               \
         0}, /* ClusterRevision */                                             \
                                                                               \
        /* Endpoint: 1, Cluster: Groups (server) */                            \
        {ZAP_EMPTY_DEFAULT(), 0x00000000, 1, ZAP_TYPE(BITMAP8),                \
         0}, /* NameSupport */                                                 \
        {ZAP_SIMPLE_DEFAULT(0), 0x0000FFFC, 4, ZAP_TYPE(BITMAP32),             \
         0}, /* FeatureMap */                                                  \
        {ZAP_SIMPLE_DEFAULT(4), 0x0000FFFD, 2, ZAP_TYPE(INT16U),               \
         0}, /* ClusterRevision */                                             \
                                                                               \
        /* Endpoint: 1, Cluster: On/Off (server) */                            \
        {ZAP_SIMPLE_DEFAULT(0), 0x00000000, 1, ZAP_TYPE(BOOLEAN),              \
         0}, /* OnOff */                                                       \
        {ZAP_SIMPLE_DEFAULT(1), 0x00004000, 1, ZAP_TYPE(BOOLEAN),              \
         0}, /* GlobalSceneControl */                                          \
        {ZAP_SIMPLE_DEFAULT(0), 0x00004001, 2, ZAP_TYPE(INT16U),               \
         ZAP_ATTRIBUTE_MASK(WRITABLE)}, /* OnTime */                           \
        {ZAP_SIMPLE_DEFAULT(0), 0x00004002, 2, ZAP_TYPE(INT16U),               \
         ZAP_ATTRIBUTE_MASK(WRITABLE)}, /* OffWaitTime */                      \
        {ZAP_MIN_MAX_DEFAULTS_INDEX(0), 0x00004003, 1, ZAP_TYPE(ENUM8),        \
         ZAP_ATTRIBUTE_MASK(MIN_MAX) | ZAP_ATTRIBUTE_MASK(WRITABLE) |          \
             ZAP_ATTRIBUTE_MASK(NULLABLE)}, /* StartUpOnOff */                 \
        {ZAP_SIMPLE_DEFAULT(0), 0x0000FFFC, 4, ZAP_TYPE(BITMAP32),             \
         0}, /* FeatureMap */                                                  \
        {ZAP_SIMPLE_DEFAULT(6), 0x0000FFFD, 2, ZAP_TYPE(INT16U),               \
         0}, /* ClusterRevision */                                             \
                                                                               \
        /* Endpoint: 1, Cluster: Level Control (server) */                     \
        {ZAP_SIMPLE_DEFAULT(0x00), 0x00000000, 1, ZAP_TYPE(INT8U),             \
         ZAP_ATTRIBUTE_MASK(NULLABLE)}, /* CurrentLevel */                     \
        {ZAP_SIMPLE_DEFAULT(0x0000), 0x00000001, 2, ZAP_TYPE(INT16U),          \
         0}, /* RemainingTime */                                               \
        {ZAP_SIMPLE_DEFAULT(0x00), 0x00000002, 1, ZAP_TYPE(INT8U),             \
         0}, /* MinLevel */                                                    \
        {ZAP_MIN_MAX_DEFAULTS_INDEX(1), 0x0000000F, 1, ZAP_TYPE(BITMAP8),      \
         ZAP_ATTRIBUTE_MASK(MIN_MAX) |                                         \
             ZAP_ATTRIBUTE_MASK(WRITABLE)}, /* Options */                      \
        {ZAP_EMPTY_DEFAULT(), 0x00000011, 1, ZAP_TYPE(INT8U),                  \
         ZAP_ATTRIBUTE_MASK(WRITABLE) |                                        \
             ZAP_ATTRIBUTE_MASK(NULLABLE)}, /* OnLevel */                      \
        {ZAP_EMPTY_DEFAULT(), 0x00004000, 1, ZAP_TYPE(INT8U),                  \
         ZAP_ATTRIBUTE_MASK(WRITABLE) |                                        \
             ZAP_ATTRIBUTE_MASK(NULLABLE)}, /* StartUpCurrentLevel */          \
        {ZAP_SIMPLE_DEFAULT(0), 0x0000FFFC, 4, ZAP_TYPE(BITMAP32),             \
         0}, /* FeatureMap */                                                  \
        {ZAP_SIMPLE_DEFAULT(5), 0x0000FFFD, 2, ZAP_TYPE(INT16U),               \
         0}, /* ClusterRevision */                                             \
                                                                               \
        /* Endpoint: 1, Cluster: Descriptor (server) */                        \
        {ZAP_EMPTY_DEFAULT(), 0x00000000, 0, ZAP_TYPE(ARRAY),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* DeviceTypeList */           \
        {ZAP_EMPTY_DEFAULT(), 0x00000001, 0, ZAP_TYPE(ARRAY),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* ServerList */               \
        {ZAP_EMPTY_DEFAULT(), 0x00000002, 0, ZAP_TYPE(ARRAY),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* ClientList */               \
        {ZAP_EMPTY_DEFAULT(), 0x00000003, 0, ZAP_TYPE(ARRAY),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* PartsList */                \
        {ZAP_EMPTY_DEFAULT(), 0x0000FFFC, 4, ZAP_TYPE(BITMAP32),               \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* FeatureMap */               \
        {ZAP_EMPTY_DEFAULT(), 0x0000FFFD, 2, ZAP_TYPE(INT16U),                 \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* ClusterRevision */          \
                                                                               \
        /* Endpoint: 1, Cluster: Scenes Management (server) */                 \
        {ZAP_SIMPLE_DEFAULT(16), 0x00000001, 2, ZAP_TYPE(INT16U),              \
         0}, /* SceneTableSize */                                              \
        {ZAP_EMPTY_DEFAULT(), 0x00000002, 0, ZAP_TYPE(ARRAY),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* FabricSceneInfo */          \
        {ZAP_SIMPLE_DEFAULT(0), 0x0000FFFC, 4, ZAP_TYPE(BITMAP32),             \
         0}, /* FeatureMap */                                                  \
        {ZAP_SIMPLE_DEFAULT(1), 0x0000FFFD, 2, ZAP_TYPE(INT16U),               \
         0}, /* ClusterRevision */                                             \
                                                                               \
        /* Endpoint: 2, Cluster: Descriptor (server) */                        \
        {ZAP_EMPTY_DEFAULT(), 0x00000000, 0, ZAP_TYPE(ARRAY),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* DeviceTypeList */           \
        {ZAP_EMPTY_DEFAULT(), 0x00000001, 0, ZAP_TYPE(ARRAY),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* ServerList */               \
        {ZAP_EMPTY_DEFAULT(), 0x00000002, 0, ZAP_TYPE(ARRAY),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* ClientList */               \
        {ZAP_EMPTY_DEFAULT(), 0x00000003, 0, ZAP_TYPE(ARRAY),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* PartsList */                \
        {ZAP_EMPTY_DEFAULT(), 0x0000FFFC, 4, ZAP_TYPE(BITMAP32),               \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* FeatureMap */               \
        {ZAP_EMPTY_DEFAULT(), 0x0000FFFD, 2, ZAP_TYPE(INT16U),                 \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* ClusterRevision */          \
                                                                               \
        /* Endpoint: 2, Cluster: Power Source (server) */                      \
        {ZAP_EMPTY_DEFAULT(), 0x00000000, 1, ZAP_TYPE(ENUM8), 0}, /* Status */ \
        {ZAP_EMPTY_DEFAULT(), 0x00000001, 1, ZAP_TYPE(INT8U), 0}, /* Order */  \
        {ZAP_EMPTY_DEFAULT(), 0x00000002, 61, ZAP_TYPE(CHAR_STRING),           \
         0}, /* Description */                                                 \
        {ZAP_EMPTY_DEFAULT(), 0x0000001F, 0, ZAP_TYPE(ARRAY),                  \
         ZAP_ATTRIBUTE_MASK(EXTERNAL_STORAGE)}, /* EndpointList */             \
        {ZAP_SIMPLE_DEFAULT(0), 0x0000FFFC, 4, ZAP_TYPE(BITMAP32),             \
         0}, /* FeatureMap */                                                  \
        {ZAP_SIMPLE_DEFAULT(1), 0x0000FFFD, 2, ZAP_TYPE(INT16U),               \
         0}, /* ClusterRevision */                                             \
                                                                               \
        /* Endpoint: 2, Cluster: Electrical Measurement (server) */            \
        {ZAP_SIMPLE_DEFAULT(0x8000), 0x00000100, 2, ZAP_TYPE(INT16S),          \
         0}, /* dc voltage */                                                  \
        {ZAP_SIMPLE_DEFAULT(0x8000), 0x00000103, 2, ZAP_TYPE(INT16S),          \
         0}, /* dc current */                                                  \
        {ZAP_SIMPLE_DEFAULT(0x8000), 0x00000106, 2, ZAP_TYPE(INT16S),          \
         0}, /* dc power */                                                    \
        {ZAP_SIMPLE_DEFAULT(0), 0x0000FFFC, 4, ZAP_TYPE(BITMAP32),             \
         0}, /* FeatureMap */                                                  \
        {ZAP_SIMPLE_DEFAULT(3), 0x0000FFFD, 2, ZAP_TYPE(INT16U),               \
         0}, /* ClusterRevision */                                             \
  }

// clang-format off
#define GENERATED_EVENT_COUNT 0
#define GENERATED_EVENTS { \
}

// clang-format on

// Cluster function static arrays
#define GENERATED_FUNCTION_ARRAYS                                                      \
  const EmberAfGenericClusterFunction                                                  \
      chipFuncArrayLocalizationConfigurationServer[] = {                               \
          (EmberAfGenericClusterFunction)                                              \
              emberAfLocalizationConfigurationClusterServerInitCallback,               \
          (EmberAfGenericClusterFunction)                                              \
              MatterLocalizationConfigurationClusterServerPreAttributeChangedCallback, \
  };                                                                                   \
  const EmberAfGenericClusterFunction                                                  \
      chipFuncArrayTimeFormatLocalizationServer[] = {                                  \
          (EmberAfGenericClusterFunction)                                              \
              emberAfTimeFormatLocalizationClusterServerInitCallback,                  \
          (EmberAfGenericClusterFunction)                                              \
              MatterTimeFormatLocalizationClusterServerPreAttributeChangedCallback,    \
  };                                                                                   \
  const EmberAfGenericClusterFunction chipFuncArrayIdentifyServer[] = {                \
      (EmberAfGenericClusterFunction)emberAfIdentifyClusterServerInitCallback,         \
      (EmberAfGenericClusterFunction)                                                  \
          MatterIdentifyClusterServerAttributeChangedCallback,                         \
  };                                                                                   \
  const EmberAfGenericClusterFunction chipFuncArrayGroupsServer[] = {                  \
      (EmberAfGenericClusterFunction)emberAfGroupsClusterServerInitCallback,           \
  };                                                                                   \
  const EmberAfGenericClusterFunction chipFuncArrayOnOffServer[] = {                   \
      (EmberAfGenericClusterFunction)emberAfOnOffClusterServerInitCallback,            \
      (EmberAfGenericClusterFunction)MatterOnOffClusterServerShutdownCallback,         \
  };                                                                                   \
  const EmberAfGenericClusterFunction chipFuncArrayLevelControlServer[] = {            \
      (EmberAfGenericClusterFunction)                                                  \
          emberAfLevelControlClusterServerInitCallback,                                \
      (EmberAfGenericClusterFunction)                                                  \
          MatterLevelControlClusterServerShutdownCallback,                             \
  };                                                                                   \
  const EmberAfGenericClusterFunction chipFuncArrayScenesManagementServer[] =          \
      {                                                                                \
          (EmberAfGenericClusterFunction)                                              \
              emberAfScenesManagementClusterServerInitCallback,                        \
          (EmberAfGenericClusterFunction)                                              \
              MatterScenesManagementClusterServerShutdownCallback,                     \
  };

// clang-format off
#define GENERATED_COMMANDS { \
  /* Endpoint: 0, Cluster: General Commissioning (server) */\
  /*   AcceptedCommandList (index=0) */ \
  0x00000000 /* ArmFailSafe */, \
  0x00000002 /* SetRegulatoryConfig */, \
  0x00000004 /* CommissioningComplete */, \
  chip::kInvalidCommandId /* end of list */, \
  /*   GeneratedCommandList (index=4)*/ \
  0x00000001 /* ArmFailSafeResponse */, \
  0x00000003 /* SetRegulatoryConfigResponse */, \
  0x00000005 /* CommissioningCompleteResponse */, \
  chip::kInvalidCommandId /* end of list */, \
  /* Endpoint: 0, Cluster: General Diagnostics (server) */\
  /*   AcceptedCommandList (index=8) */ \
  0x00000000 /* TestEventTrigger */, \
  0x00000001 /* TimeSnapshot */, \
  chip::kInvalidCommandId /* end of list */, \
  /*   GeneratedCommandList (index=11)*/ \
  0x00000002 /* TimeSnapshotResponse */, \
  chip::kInvalidCommandId /* end of list */, \
  /* Endpoint: 0, Cluster: Administrator Commissioning (server) */\
  /*   AcceptedCommandList (index=13) */ \
  0x00000000 /* OpenCommissioningWindow */, \
  0x00000002 /* RevokeCommissioning */, \
  chip::kInvalidCommandId /* end of list */, \
  /* Endpoint: 0, Cluster: Operational Credentials (server) */\
  /*   AcceptedCommandList (index=16) */ \
  0x00000000 /* AttestationRequest */, \
  0x00000002 /* CertificateChainRequest */, \
  0x00000004 /* CSRRequest */, \
  0x00000006 /* AddNOC */, \
  0x00000007 /* UpdateNOC */, \
  0x00000009 /* UpdateFabricLabel */, \
  0x0000000A /* RemoveFabric */, \
  0x0000000B /* AddTrustedRootCertificate */, \
  chip::kInvalidCommandId /* end of list */, \
  /*   GeneratedCommandList (index=25)*/ \
  0x00000001 /* AttestationResponse */, \
  0x00000003 /* CertificateChainResponse */, \
  0x00000005 /* CSRResponse */, \
  0x00000008 /* NOCResponse */, \
  chip::kInvalidCommandId /* end of list */, \
  /* Endpoint: 0, Cluster: Group Key Management (server) */\
  /*   AcceptedCommandList (index=30) */ \
  0x00000000 /* KeySetWrite */, \
  0x00000001 /* KeySetRead */, \
  0x00000003 /* KeySetRemove */, \
  0x00000004 /* KeySetReadAllIndices */, \
  chip::kInvalidCommandId /* end of list */, \
  /*   GeneratedCommandList (index=35)*/ \
  0x00000002 /* KeySetReadResponse */, \
  0x00000005 /* KeySetReadAllIndicesResponse */, \
  chip::kInvalidCommandId /* end of list */, \
  /* Endpoint: 1, Cluster: Identify (server) */\
  /*   AcceptedCommandList (index=38) */ \
  0x00000000 /* Identify */, \
  0x00000040 /* TriggerEffect */, \
  chip::kInvalidCommandId /* end of list */, \
  /* Endpoint: 1, Cluster: Groups (server) */\
  /*   AcceptedCommandList (index=41) */ \
  0x00000000 /* AddGroup */, \
  0x00000001 /* ViewGroup */, \
  0x00000002 /* GetGroupMembership */, \
  0x00000003 /* RemoveGroup */, \
  0x00000004 /* RemoveAllGroups */, \
  0x00000005 /* AddGroupIfIdentifying */, \
  chip::kInvalidCommandId /* end of list */, \
  /*   GeneratedCommandList (index=48)*/ \
  0x00000000 /* AddGroupResponse */, \
  0x00000001 /* ViewGroupResponse */, \
  0x00000002 /* GetGroupMembershipResponse */, \
  0x00000003 /* RemoveGroupResponse */, \
  chip::kInvalidCommandId /* end of list */, \
  /* Endpoint: 1, Cluster: On/Off (server) */\
  /*   AcceptedCommandList (index=53) */ \
  0x00000000 /* Off */, \
  0x00000001 /* On */, \
  0x00000002 /* Toggle */, \
  0x00000040 /* OffWithEffect */, \
  0x00000041 /* OnWithRecallGlobalScene */, \
  0x00000042 /* OnWithTimedOff */, \
  chip::kInvalidCommandId /* end of list */, \
  /* Endpoint: 1, Cluster: Level Control (server) */\
  /*   AcceptedCommandList (index=60) */ \
  0x00000000 /* MoveToLevel */, \
  0x00000001 /* Move */, \
  0x00000002 /* Step */, \
  0x00000003 /* Stop */, \
  0x00000004 /* MoveToLevelWithOnOff */, \
  0x00000005 /* MoveWithOnOff */, \
  0x00000006 /* StepWithOnOff */, \
  0x00000007 /* StopWithOnOff */, \
  chip::kInvalidCommandId /* end of list */, \
  /* Endpoint: 1, Cluster: Scenes Management (server) */\
  /*   AcceptedCommandList (index=69) */ \
  0x00000000 /* AddScene */, \
  0x00000001 /* ViewScene */, \
  0x00000002 /* RemoveScene */, \
  0x00000003 /* RemoveAllScenes */, \
  0x00000004 /* StoreScene */, \
  0x00000005 /* RecallScene */, \
  0x00000006 /* GetSceneMembership */, \
  0x00000040 /* CopyScene */, \
  chip::kInvalidCommandId /* end of list */, \
  /*   GeneratedCommandList (index=78)*/ \
  0x00000000 /* AddSceneResponse */, \
  0x00000001 /* ViewSceneResponse */, \
  0x00000002 /* RemoveSceneResponse */, \
  0x00000003 /* RemoveAllScenesResponse */, \
  0x00000004 /* StoreSceneResponse */, \
  0x00000006 /* GetSceneMembershipResponse */, \
  0x00000040 /* CopySceneResponse */, \
  chip::kInvalidCommandId /* end of list */, \
}

// clang-format on

// This is an array of EmberAfCluster structures.
#define GENERATED_CLUSTER_COUNT 21
// clang-format off
#define GENERATED_CLUSTERS { \
  { \
      /* Endpoint: 0, Cluster: Descriptor (server) */ \
      .clusterId = 0x0000001D, \
      .attributes = ZAP_ATTRIBUTE_INDEX(0), \
      .attributeCount = 6, \
      .clusterSize = 0, \
      .mask = ZAP_CLUSTER_MASK(SERVER), \
      .functions = NULL, \
      .acceptedCommandList = nullptr, \
      .generatedCommandList = nullptr, \
      .eventList = nullptr, \
      .eventCount = 0, \
    },\
  { \
      /* Endpoint: 0, Cluster: Access Control (server) */ \
      .clusterId = 0x0000001F, \
      .attributes = ZAP_ATTRIBUTE_INDEX(6), \
      .attributeCount = 7, \
      .clusterSize = 4, \
      .mask = ZAP_CLUSTER_MASK(SERVER), \
      .functions = NULL, \
      .acceptedCommandList = nullptr, \
      .generatedCommandList = nullptr, \
      .eventList = nullptr, \
      .eventCount = 0, \
    },\
  { \
      /* Endpoint: 0, Cluster: Basic Information (server) */ \
      .clusterId = 0x00000028, \
      .attributes = ZAP_ATTRIBUTE_INDEX(13), \
      .attributeCount = 16, \
      .clusterSize = 39, \
      .mask = ZAP_CLUSTER_MASK(SERVER), \
      .functions = NULL, \
      .acceptedCommandList = nullptr, \
      .generatedCommandList = nullptr, \
      .eventList = nullptr, \
      .eventCount = 0, \
    },\
  { \
      /* Endpoint: 0, Cluster: Localization Configuration (server) */ \
      .clusterId = 0x0000002B, \
      .attributes = ZAP_ATTRIBUTE_INDEX(29), \
      .attributeCount = 4, \
      .clusterSize = 42, \
      .mask = ZAP_CLUSTER_MASK(SERVER) | ZAP_CLUSTER_MASK(INIT_FUNCTION) | ZAP_CLUSTER_MASK(PRE_ATTRIBUTE_CHANGED_FUNCTION), \
      .functions = chipFuncArrayLocalizationConfigurationServer, \
      .acceptedCommandList = nullptr, \
      .generatedCommandList = nullptr, \
      .eventList = nullptr, \
      .eventCount = 0, \
    },\
  { \
      /* Endpoint: 0, Cluster: Time Format Localization (server) */ \
      .clusterId = 0x0000002C, \
      .attributes = ZAP_ATTRIBUTE_INDEX(33), \
      .attributeCount = 3, \
      .clusterSize = 7, \
      .mask = ZAP_CLUSTER_MASK(SERVER) | ZAP_CLUSTER_MASK(INIT_FUNCTION) | ZAP_CLUSTER_MASK(PRE_ATTRIBUTE_CHANGED_FUNCTION), \
      .functions = chipFuncArrayTimeFormatLocalizationServer, \
      .acceptedCommandList = nullptr, \
      .generatedCommandList = nullptr, \
      .eventList = nullptr, \
      .eventCount = 0, \
    },\
  { \
      /* Endpoint: 0, Cluster: Unit Localization (server) */ \
      .clusterId = 0x0000002D, \
      .attributes = ZAP_ATTRIBUTE_INDEX(36), \
      .attributeCount = 2, \
      .clusterSize = 6, \
      .mask = ZAP_CLUSTER_MASK(SERVER), \
      .functions = NULL, \
      .acceptedCommandList = nullptr, \
      .generatedCommandList = nullptr, \
      .eventList = nullptr, \
      .eventCount = 0, \
    },\
  { \
      /* Endpoint: 0, Cluster: General Commissioning (server) */ \
      .clusterId = 0x00000030, \
      .attributes = ZAP_ATTRIBUTE_INDEX(38), \
      .attributeCount = 7, \
      .clusterSize = 14, \
      .mask = ZAP_CLUSTER_MASK(SERVER), \
      .functions = NULL, \
      .acceptedCommandList = ZAP_GENERATED_COMMANDS_INDEX( 0 ), \
      .generatedCommandList = ZAP_GENERATED_COMMANDS_INDEX( 4 ), \
      .eventList = nullptr, \
      .eventCount = 0, \
    },\
  { \
      /* Endpoint: 0, Cluster: Network Commissioning (server) */ \
      .clusterId = 0x00000031, \
      .attributes = ZAP_ATTRIBUTE_INDEX(45), \
      .attributeCount = 8, \
      .clusterSize = 46, \
      .mask = ZAP_CLUSTER_MASK(SERVER), \
      .functions = NULL, \
      .acceptedCommandList = nullptr, \
      .generatedCommandList = nullptr, \
      .eventList = nullptr, \
      .eventCount = 0, \
    },\
  { \
      /* Endpoint: 0, Cluster: General Diagnostics (server) */ \
      .clusterId = 0x00000033, \
      .attributes = ZAP_ATTRIBUTE_INDEX(53), \
      .attributeCount = 6, \
      .clusterSize = 1, \
      .mask = ZAP_CLUSTER_MASK(SERVER), \
      .functions = NULL, \
      .acceptedCommandList = ZAP_GENERATED_COMMANDS_INDEX( 8 ), \
      .generatedCommandList = ZAP_GENERATED_COMMANDS_INDEX( 11 ), \
      .eventList = nullptr, \
      .eventCount = 0, \
    },\
  { \
      /* Endpoint: 0, Cluster: Administrator Commissioning (server) */ \
      .clusterId = 0x0000003C, \
      .attributes = ZAP_ATTRIBUTE_INDEX(59), \
      .attributeCount = 5, \
      .clusterSize = 6, \
      .mask = ZAP_CLUSTER_MASK(SERVER), \
      .functions = NULL, \
      .acceptedCommandList = ZAP_GENERATED_COMMANDS_INDEX( 13 ), \
      .generatedCommandList = nullptr, \
      .eventList = nullptr, \
      .eventCount = 0, \
    },\
  { \
      /* Endpoint: 0, Cluster: Operational Credentials (server) */ \
      .clusterId = 0x0000003E, \
      .attributes = ZAP_ATTRIBUTE_INDEX(64), \
      .attributeCount = 8, \
      .clusterSize = 6, \
      .mask = ZAP_CLUSTER_MASK(SERVER), \
      .functions = NULL, \
      .acceptedCommandList = ZAP_GENERATED_COMMANDS_INDEX( 16 ), \
      .generatedCommandList = ZAP_GENERATED_COMMANDS_INDEX( 25 ), \
      .eventList = nullptr, \
      .eventCount = 0, \
    },\
  { \
      /* Endpoint: 0, Cluster: Group Key Management (server) */ \
      .clusterId = 0x0000003F, \
      .attributes = ZAP_ATTRIBUTE_INDEX(72), \
      .attributeCount = 6, \
      .clusterSize = 0, \
      .mask = ZAP_CLUSTER_MASK(SERVER), \
      .functions = NULL, \
      .acceptedCommandList = ZAP_GENERATED_COMMANDS_INDEX( 30 ), \
      .generatedCommandList = ZAP_GENERATED_COMMANDS_INDEX( 35 ), \
      .eventList = nullptr, \
      .eventCount = 0, \
    },\
  { \
      /* Endpoint: 1, Cluster: Identify (server) */ \
      .clusterId = 0x00000003, \
      .attributes = ZAP_ATTRIBUTE_INDEX(78), \
      .attributeCount = 4, \
      .clusterSize = 9, \
      .mask = ZAP_CLUSTER_MASK(SERVER) | ZAP_CLUSTER_MASK(INIT_FUNCTION) | ZAP_CLUSTER_MASK(ATTRIBUTE_CHANGED_FUNCTION), \
      .functions = chipFuncArrayIdentifyServer, \
      .acceptedCommandList = ZAP_GENERATED_COMMANDS_INDEX( 38 ), \
      .generatedCommandList = nullptr, \
      .eventList = nullptr, \
      .eventCount = 0, \
    },\
  { \
      /* Endpoint: 1, Cluster: Groups (server) */ \
      .clusterId = 0x00000004, \
      .attributes = ZAP_ATTRIBUTE_INDEX(82), \
      .attributeCount = 3, \
      .clusterSize = 7, \
      .mask = ZAP_CLUSTER_MASK(SERVER) | ZAP_CLUSTER_MASK(INIT_FUNCTION), \
      .functions = chipFuncArrayGroupsServer, \
      .acceptedCommandList = ZAP_GENERATED_COMMANDS_INDEX( 41 ), \
      .generatedCommandList = ZAP_GENERATED_COMMANDS_INDEX( 48 ), \
      .eventList = nullptr, \
      .eventCount = 0, \
    },\
  { \
      /* Endpoint: 1, Cluster: On/Off (server) */ \
      .clusterId = 0x00000006, \
      .attributes = ZAP_ATTRIBUTE_INDEX(85), \
      .attributeCount = 7, \
      .clusterSize = 13, \
      .mask = ZAP_CLUSTER_MASK(SERVER) | ZAP_CLUSTER_MASK(INIT_FUNCTION) | ZAP_CLUSTER_MASK(SHUTDOWN_FUNCTION), \
      .functions = chipFuncArrayOnOffServer, \
      .acceptedCommandList = ZAP_GENERATED_COMMANDS_INDEX( 53 ), \
      .generatedCommandList = nullptr, \
      .eventList = nullptr, \
      .eventCount = 0, \
    },\
  { \
      /* Endpoint: 1, Cluster: Level Control (server) */ \
      .clusterId = 0x00000008, \
      .attributes = ZAP_ATTRIBUTE_INDEX(92), \
      .attributeCount = 8, \
      .clusterSize = 13, \
      .mask = ZAP_CLUSTER_MASK(SERVER) | ZAP_CLUSTER_MASK(INIT_FUNCTION) | ZAP_CLUSTER_MASK(SHUTDOWN_FUNCTION), \
      .functions = chipFuncArrayLevelControlServer, \
      .acceptedCommandList = ZAP_GENERATED_COMMANDS_INDEX( 60 ), \
      .generatedCommandList = nullptr, \
      .eventList = nullptr, \
      .eventCount = 0, \
    },\
  { \
      /* Endpoint: 1, Cluster: Descriptor (server) */ \
      .clusterId = 0x0000001D, \
      .attributes = ZAP_ATTRIBUTE_INDEX(100), \
      .attributeCount = 6, \
      .clusterSize = 0, \
      .mask = ZAP_CLUSTER_MASK(SERVER), \
      .functions = NULL, \
      .acceptedCommandList = nullptr, \
      .generatedCommandList = nullptr, \
      .eventList = nullptr, \
      .eventCount = 0, \
    },\
  { \
      /* Endpoint: 1, Cluster: Scenes Management (server) */ \
      .clusterId = 0x00000062, \
      .attributes = ZAP_ATTRIBUTE_INDEX(106), \
      .attributeCount = 4, \
      .clusterSize = 8, \
      .mask = ZAP_CLUSTER_MASK(SERVER) | ZAP_CLUSTER_MASK(INIT_FUNCTION) | ZAP_CLUSTER_MASK(SHUTDOWN_FUNCTION), \
      .functions = chipFuncArrayScenesManagementServer, \
      .acceptedCommandList = ZAP_GENERATED_COMMANDS_INDEX( 69 ), \
      .generatedCommandList = ZAP_GENERATED_COMMANDS_INDEX( 78 ), \
      .eventList = nullptr, \
      .eventCount = 0, \
    },\
  { \
      /* Endpoint: 2, Cluster: Descriptor (server) */ \
      .clusterId = 0x0000001D, \
      .attributes = ZAP_ATTRIBUTE_INDEX(110), \
      .attributeCount = 6, \
      .clusterSize = 0, \
      .mask = ZAP_CLUSTER_MASK(SERVER), \
      .functions = NULL, \
      .acceptedCommandList = nullptr, \
      .generatedCommandList = nullptr, \
      .eventList = nullptr, \
      .eventCount = 0, \
    },\
  { \
      /* Endpoint: 2, Cluster: Power Source (server) */ \
      .clusterId = 0x0000002F, \
      .attributes = ZAP_ATTRIBUTE_INDEX(116), \
      .attributeCount = 6, \
      .clusterSize = 69, \
      .mask = ZAP_CLUSTER_MASK(SERVER), \
      .functions = NULL, \
      .acceptedCommandList = nullptr, \
      .generatedCommandList = nullptr, \
      .eventList = nullptr, \
      .eventCount = 0, \
    },\
  { \
      /* Endpoint: 2, Cluster: Electrical Measurement (server) */ \
      .clusterId = 0x00000B04, \
      .attributes = ZAP_ATTRIBUTE_INDEX(122), \
      .attributeCount = 5, \
      .clusterSize = 12, \
      .mask = ZAP_CLUSTER_MASK(SERVER), \
      .functions = NULL, \
      .acceptedCommandList = nullptr, \
      .generatedCommandList = nullptr, \
      .eventList = nullptr, \
      .eventCount = 0, \
    },\
}

// clang-format on

#define ZAP_FIXED_ENDPOINT_DATA_VERSION_COUNT 21

// This is an array of EmberAfEndpointType structures.
#define GENERATED_ENDPOINT_TYPES                                               \
  {                                                                            \
    {ZAP_CLUSTER_INDEX(0), 12, 171}, {ZAP_CLUSTER_INDEX(12), 6, 50},           \
        {ZAP_CLUSTER_INDEX(18), 3, 81},                                        \
  }

// Largest attribute size is needed for various buffers
#define ATTRIBUTE_LARGEST (66)

static_assert(ATTRIBUTE_LARGEST <= CHIP_CONFIG_MAX_ATTRIBUTE_STORE_ELEMENT_SIZE,
              "ATTRIBUTE_LARGEST larger than expected");

// Total size of singleton attributes
#define ATTRIBUTE_SINGLETONS_SIZE (39)

// Total size of attribute storage
#define ATTRIBUTE_MAX_SIZE (302)

// Number of fixed endpoints
#define FIXED_ENDPOINT_COUNT (3)

// Array of endpoints that are supported, the data inside
// the array is the endpoint number.
#define FIXED_ENDPOINT_ARRAY                                                   \
  { 0x0000, 0x0001, 0x0002 }

// Array of profile ids
#define FIXED_PROFILE_IDS                                                      \
  { 0x0103, 0x0103, 0x0103 }

// Array of device types
#define FIXED_DEVICE_TYPES                                                     \
  {                                                                            \
    {0x00000016, 1}, {0x00000101, 1}, { 0x00000011, 1 }                        \
  }

// Array of device type offsets
#define FIXED_DEVICE_TYPE_OFFSETS                                              \
  { 0, 1, 2 }

// Array of device type lengths
#define FIXED_DEVICE_TYPE_LENGTHS                                              \
  { 1, 1, 1 }

// Array of endpoint types supported on each endpoint
#define FIXED_ENDPOINT_TYPES                                                   \
  { 0, 1, 2 }

// Array of networks supported on each endpoint
#define FIXED_NETWORKS                                                         \
  { 0, 0, 0 }
